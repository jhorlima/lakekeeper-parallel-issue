services:
  jupyter:
    image: quay.io/jupyter/pyspark-notebook:2024-10-14
    command: start-notebook.sh --NotebookApp.token=''
    volumes:
      - ./notebooks/Pyiceberg.ipynb:/home/jovyan/Pyiceberg.ipynb
    networks:
      iceberg_net:
    ports:
      - "8888:8888"

  lakekeeper-ingestion:
    build: .
    environment:
      - CATALOG_URL=http://lakekeeper-server:8181/catalog
      - WAREHOUSE=demo
      - CATALOG_NAME=my_catalog
      - CATALOG_TOKEN=dummy
      - NAMESPACE=default
      - TABLE_NAME=sample_table
    volumes:
      - ./sample_data.csv:/app/sample_data.csv
    networks:
      iceberg_net:
    depends_on:
      - lakekeeper-server
    stdin_open: true
    tty: true

  lakekeeper-server:
    image: ${LAKEKEEPER_TEST__SERVER_IMAGE:-quay.io/lakekeeper/catalog:latest-main}
    pull_policy: always
    environment:
      - LAKEKEEPER__PG_ENCRYPTION_KEY=This-is-NOT-Secure!
      - LAKEKEEPER__PG_DATABASE_URL_READ=postgresql://postgres:postgres@db:5432/postgres
      - LAKEKEEPER__PG_DATABASE_URL_WRITE=postgresql://postgres:postgres@db:5432/postgres
      - RUST_LOG=trace,axum=trace,sqlx=trace,iceberg-catalog=trace
    command: ["serve"]
    depends_on:
      lakekeeper-migrate:
        condition: service_completed_successfully
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      iceberg_net:
    ports:
      - "8181:8181"

  lakekeeper-migrate:
    image: ${LAKEKEEPER_TEST__SERVER_IMAGE:-quay.io/lakekeeper/catalog:latest-main}
    pull_policy: always
    environment:
      - LAKEKEEPER__PG_ENCRYPTION_KEY=This-is-NOT-Secure!
      - LAKEKEEPER__PG_DATABASE_URL_READ=postgresql://postgres:postgres@db:5432/postgres
      - LAKEKEEPER__PG_DATABASE_URL_WRITE=postgresql://postgres:postgres@db:5432/postgres
      - RUST_LOG=info
    restart: "no"
    command: ["migrate"]
    depends_on:
      db:
        condition: service_healthy
    networks:
      iceberg_net:

  bootstrap:
    image: curlimages/curl
    depends_on:
      lakekeeper-server:
        condition: service_started
    restart: "no"
    command:
      - -w
      - "%{http_code}"
      - "-X"
      - "POST"
      - "-v"
      - "http://lakekeeper-server:8181/management/v1/bootstrap"
      - "-H"
      - "Content-Type: application/json"
      - "--data"
      - '{"accept-terms-of-use": true}'
      - "-o"
      - "/dev/null"
      # - "--fail-with-body"
    networks:
      iceberg_net:

  initial-warehouse:
    image: curlimages/curl
    depends_on:
      lakekeeper-server:
        condition: service_started
      bootstrap:
        condition: service_completed_successfully
    restart: "no"
    command:
      - -w
      - "%{http_code}"
      - "-X"
      - "POST"
      - "-v"
      - "http://lakekeeper-server:8181/management/v1/warehouse"
      - "-H"
      - "Content-Type: application/json"
      - "--data"
      - "@create-default-warehouse.json"
      - "-o"
      - "/dev/null"
      # - "--fail-with-body"
    volumes:
      - ./create-default-warehouse.json:/home/curl_user/create-default-warehouse.json
    networks:
      iceberg_net:

  db:
    image: bitnami/postgresql:16.3.0
    environment:
      - POSTGRESQL_USERNAME=postgres
      - POSTGRESQL_PASSWORD=postgres
      - POSTGRESQL_DATABASE=postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -p 5432 -d postgres"]
      interval: 2s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      iceberg_net:

  minio:
    image: bitnami/minio:2025.4.22
    environment:
      - MINIO_ROOT_USER=minio-root-user
      - MINIO_ROOT_PASSWORD=minio-root-password
      - MINIO_API_PORT_NUMBER=9000
      - MINIO_CONSOLE_PORT_NUMBER=9001
      - MINIO_SCHEME=http
      - MINIO_DEFAULT_BUCKETS=examples
    healthcheck:
      test: ["CMD", "mc", "ls", "local", "|", "grep", "examples"]
      interval: 2s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      iceberg_net:
    ports:
      - "9000:9000"
      - "9001:9001"

networks:
  iceberg_net:
